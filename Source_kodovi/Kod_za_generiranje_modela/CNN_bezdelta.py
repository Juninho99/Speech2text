import pandas as pd
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, AveragePooling2D
from tensorflow.keras.utils import to_categorical
import keras


if __name__ == "__main__":
    # print(keras.__version__)

    #treningPodaci = pd.read_csv("d1.csv")  # učitavanje mfcc koeficijenata iz prethodno generisanog csv fajla
    #testPodaci = pd.read_csv("d2.csv")
    treningPodaci = pd.read_csv("trening_13_8192_20.csv")  # učitavanje mfcc koeficijenata iz prethodno generisanog csv fajla
    testPodaci = pd.read_csv("testing_13_8192_20.csv")
    # datainDataFrame =  treningPodaci[

    datainDataFrame =  treningPodaci[


    dataoutDataFrame =  treningPodaci[["0"]]  # izlazna kolona za klasifikator

    # testinDataFrame =  testPodaci[
    #     ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", "167", "168", "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", "181", "182", "183", "184", "185", "186", "187", "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "200", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219", "220", "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "236", "237", "238", "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", "253", "254", "255", "256", "257", "258", "259", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "270", "271", "272", "273", "274", "275", "276", "277", "278", "279", "280", "281", "282", "283", "284", "285", "286", "287", "288", "289", "290", "291", "292", "293", "294", "295", "296", "297", "298", "299", "300", "301", "302", "303", "304", "305", "306", "307", "308", "309", "310", "311", "312", "313", "314", "315", "316", "317", "318", "319", "320", "321", "322", "323", "324", "325", "326", "327", "328", "329", "330", "331", "332", "333", "334", "335", "336", "337", "338", "339", "340", "341", "342", "343", "344", "345", "346", "347", "348", "349", "350", "351", "352", "353", "354", "355", "356", "357", "358", "359", "360", "361", "362", "363", "364", "365", "366", "367", "368", "369", "370", "371", "372", "373", "374", "375", "376", "377", "378", "379", "380", "381", "382", "383", "384", "385", "386", "387", "388", "389", "390", "391", "392", "393", "394", "395", "396", "397", "398", "399", "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410", "411", "412", "413", "414", "415", "416", "417", "418", "419", "420", "421", "422", "423", "424", "425", "426", "427", "428", "429", "430", "431", "432", "433", "434", "435", "436", "437", "438", "439", "440", "441", "442", "443", "444", "445", "446", "447", "448", "449", "450", "451", "452", "453", "454", "455", "456", "457", "458", "459", "460", "461", "462", "463", "464", "465", "466", "467", "468", "469", "470", "471", "472", "473", "474", "475", "476", "477", "478", "479", "480", "481", "482", "483", "484", "485", "486", "487", "488", "489", "490", "491", "492", "493", "494", "495", "496", "497", "498", "499", "500", "501", "502", "503", "504", "505", "506", "507", "508", "509", "510", "511", "512", "513", "514", "515", "516", "517", "518", "519", "520"]]
    testinDataFrame =  testPodaci[


    testoutDataFrame = testPodaci[["0"]]  # izlazna kolona za klasifikator


    # Prvo pokusati bez delti
    # 
    dataSamplesN = np.size(dataoutDataFrame)
    testSamplesN = np.size(testoutDataFrame)

    # print(type(trainingSamplesN))

    datain = np.zeros([dataSamplesN, 20, 13])
    datainmat = np.array(datainDataFrame)
    for i in range(dataSamplesN):
        datain[i,:,:] = np.reshape(datainmat[i,:], (20,13))

    dataout = np.array(dataoutDataFrame)

    testin = np.zeros([testSamplesN, 20, 13])
    testinmat = np.array(testinDataFrame)
    for i in range(testSamplesN):
        testin[i,:,:] = np.reshape(testinmat[i,:], (20,13))

    testout = np.array(testoutDataFrame)


    # exit()
    # 

    suma = 0;
    # Build the model.
    # model = Sequential([
    #   Conv2D(12, kernel_size=(5, 5), input_shape = (20, 13, 1)),
    #   AveragePooling2D(pool_size=(2, 2)),
    #   Conv2D(16, kernel_size=(3, 3)),
    #   AveragePooling2D(pool_size=(2, 2)),
    #   Flatten(),
    #   Dense(128, activation='relu'),
    #   Dense(32, activation='relu'),
    #   Dense(10, activation='softmax'),
    # ])

    lenet = Sequential()

    # Convolutional Layer C1
    lenet.add(Conv2D(6, kernel_size=(5, 5), activation='relu', 
                     input_shape=(20, 13, 1), padding='same', name='C1'))

    # # Pooling Layer S2
    # lenet.add(AveragePooling2D(pool_size=(2, 2), name='S2'))

    # Convolutional Layer C3
    lenet.add(Conv2D(16, kernel_size=(3, 3), activation='relu', name='C3'))

    # Pooling Layer S4
    lenet.add(AveragePooling2D(pool_size=(2, 2), name='S4'))

    # Fully Connected Convolutional Layer C5
    lenet.add(Conv2D(120, kernel_size=(3, 3), activation='relu', name='C5'))

    # Fully Connected Layer FC6
    lenet.add(Flatten())
    lenet.add(Dense(84, activation='relu', name='FC6'))

    #Output Layer (softmax activation)
    lenet.add(Dense(10, activation='softmax', name='OUTPUT'))

    model = lenet

    # Compile the model.
    model.compile(
     optimizer='adam',
     loss='categorical_crossentropy',
     metrics=['accuracy'],
    )

    for i in range(1,2):
        # Split the data into training and validation sets
        X_train, X_val, y_train, y_val = train_test_split(datain, dataout, test_size=0.2)
        # Train the model.
        history = model.fit(
            X_train,
            to_categorical(y_train),
            validation_data=(X_val, to_categorical(y_val)),
            epochs=15,
            batch_size=32,
            # verbose=0
        )

        # Evaluate the model.
        loss, accuracy = model.evaluate(
         testin,
         to_categorical(testout)
        )
        
        suma = suma + accuracy
        # Save the model to disk.
        spasi = str(i) + "_" + str(accuracy) + ".h5"
        model.save_weights(spasi)
        plt.figure()
        plt.plot(np.array(history.history['loss']))
        plt.hold()
        plt.plot(np.array(history.history['val_loss']))
        plt.figure()
        plt.plot(np.array(history.history['accuracy']))
        plt.hold()
        plt.plot(np.array(history.history['val_accuracy']))
        plt.show()

    
    print(suma)
    # Load the model from disk later using:
    #model.load_weights('model_v02_128_64_32_ep30_bs16.h5')

    

    # Predict on the first 5 test images.
    # predictions = model.predict(test_images[:5])

    # np.random.shuffle(vanjskiTestIn)
    # br_tacnih = 0
    # br_netacnih = 0
    # br_netacnih1 = 0
    # predictions = model.predict(vanjskiTestIn)
    # for i in range(320):
        # if(max(predictions[i]) < 0.95):
            
            
            # if np.argmax(predictions[i]) == int(i/32):
                # br_tacnih = br_tacnih + 1
            # else:
                # br_netacnih = br_netacnih + 1
        # else:
            # if np.argmax(predictions[i]) != int(i/32):
                # print(i%32, int(i/32), np.argmax(predictions[i]), predictions[i])
                # br_netacnih1 = br_netacnih1 + 1
    # #
    # print(br_tacnih, br_netacnih, br_netacnih1)
    # br_tacnih1 = 0
    # for i in range(320):
        # # # print(int(i/32), np.argmax(predictions[i]))
        # if np.argmax(predictions[i]) == int(i/32):
            # br_tacnih1 = br_tacnih1 + 1
    
    # print(br_tacnih1, 320, br_tacnih1/320*100)



    # Print our model's predictions.
    # print(np.argmax(predictions, axis=1)) # [7, 2, 1, 0, 4]
    # moji_pred = np.argmax(predictions, axis=1)

    # Check our predictions against the ground truths.
    # print(test_labels[:5]) # [7, 2, 1, 0, 4]
    # print(vanjskiTestOut) # [7, 2, 1, 0, 4]